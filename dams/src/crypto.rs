//! Application-specific cryptographic types and operations.
//!
//! Defines and implements keys and secret types, and the appropriate
//! transformations between them. The [`client`] submodule provides wrappers
//! around larger blocks of client-side cryptography.

use std::marker::PhantomData;

use bytes::Bytes;
use rand::{CryptoRng, RngCore};
use serde::{Deserialize, Serialize};
use thiserror::Error;

use crate::user::UserId;

pub mod client;

/// Errors that arise in the cryptography module.
///
/// Implementation note: this is not necessarily exhaustive yet - more variants
/// may be added as the module is implemented.
#[derive(Debug, Clone, Copy, Error)]
pub enum CryptoError {
    #[error("Failed to decrypt ciphertext and/or authenticate associated data")]
    DecryptionFailed,
}

/// The associated data and additional context used in [`Encrypted`] AEAD
/// ciphertexts and (TODO #130: HKDF) key derivations.
#[derive(Debug, Clone)]
struct AssociatedData(String);

impl Default for AssociatedData {
    fn default() -> Self {
        Self(String::from(
            "Version 0.1: Arbitrary secrets proof of concept. ",
        ))
    }
}

/// A ciphertext representing an object of type `T`, encrypted under (TODO #107:
/// encryption scheme).
///
/// Implementation note: there may be additional fields in this struct (e.g. an
/// authentication blob separate from the ciphertext), or the types might
/// change.
#[allow(unused)]
#[derive(Debug, Clone)]
pub struct Encrypted<T> {
    ciphertext: Bytes,
    associated_data: AssociatedData,
    original_type: PhantomData<T>,
}

/// A well-formed symmetric encryption key for the (TODO #107: specify
/// encryption scheme) authenticated encryption with associated data (AEAD)
/// scheme.
#[derive(Debug, Clone)]
struct AeadKey;

#[allow(unused)]
impl<T> Encrypted<T>
where
    T: From<Bytes>,
    Bytes: From<T>,
{
    /// Encrypt the `T` under the [`AeadKey`] with the [`AssociatedData`].
    fn encrypt(object: T, associated_data: &AssociatedData, aead_key: &AeadKey) -> Encrypted<T> {
        todo!()
    }

    /// Decrypt the ciphertext to a `T`.
    ///
    /// Raises a [`CryptoError::DecryptionFailed`] if decryption fails or if the
    /// associated data fails to authenticate.
    fn decrypt(self, aead_key: &AeadKey) -> Result<T, CryptoError> {
        todo!()
    }
}

impl Encrypted<Secret> {
    pub fn decrypt_secret(self, _storage_key: StorageKey) -> Secret {
        todo!()
    }
}

/// An export key is secure key material produced as client output from OPAQUE.
///
/// This uses standardized naming, but is _not_ directly used as an encryption
/// key in this system. Instead, the client uses it to derive a master key.
///
/// This key should not be stored or saved beyond the lifetime of a single
/// authentication session.
/// It should never be sent to the server or passed out to the local calling
/// application.
///
/// Implementation note: this will be a wrapper around `opaque_ke`'s
/// `export_key` field in the
/// [ClientRegistrationFinishResult](opaque_ke::ClientRegistrationFinishResult)
/// and corresponding registration result.
#[allow(unused)]
#[derive(Debug)]
pub struct OpaqueExportKey;

impl OpaqueExportKey {
    /// Derive a [`MasterKey`] from the export key.
    #[allow(unused)]
    fn derive_master_key(&self) -> MasterKey {
        todo!()
    }
}

/// The master key is a default-length symmetric key for (TODO #107: encryption
/// scheme).
///
/// It is used by the client to securely encrypt their [`StorageKey`]. It should
/// not be stored or saved beyond the lifetime of a single authentication
/// session. It should never be sent to the server or passed out to the local
/// calling application.
#[allow(unused)]
#[derive(Debug)]
struct MasterKey;

#[allow(unused)]
impl MasterKey {
    /// Encrypt the given [`StorageKey`] under an AEAD scheme (TODO #107:
    /// describe).
    fn encrypt_storage_key(self, storage_key: StorageKey) -> Encrypted<StorageKey> {
        todo!()
    }
}

/// A storage key is a default-length symmetric key for (TODO #107: encryption
/// scheme) used to encrypt stored data.
///
/// It generated by the client and should never be revealed to the server or the
/// calling application.
/// It should not be stored or saved beyond the lifetime of a single
/// authentication session.
#[allow(unused)]
#[derive(Debug)]
pub struct StorageKey;

#[allow(unused)]
impl StorageKey {
    /// Generate a new 32-byte [`StorageKey`].
    fn generate() -> Self {
        todo!()
    }

    /// Encrypt the given [`Secret`] under an AEAD scheme (TODO #107:
    /// describe).
    fn encrypt_data(self, secret: &Secret) -> Encrypted<Secret> {
        todo!()
    }
}

/// Universally unique identifier for a secret.
#[allow(unused)]
#[derive(Debug, Serialize, Deserialize)]
pub struct KeyId;

#[allow(unused)]
impl KeyId {
    /// Generate a new, random `KeyId` for the given [`UserId`].
    ///
    /// This is called by the key server.
    fn generate(rng: impl CryptoRng + RngCore, user_id: UserId) -> Self {
        todo!()
    }
}

/// An arbitrary secret.
///
/// This is generated by the client and should never be revealed to the server.
#[derive(Debug, Deserialize, Serialize)]
pub struct Secret {
    /// The actual bytes of secret material.
    material: Bytes,
}

#[allow(unused)]
impl Secret {
    /// Generate a new secret of length `len`.
    fn generate(rng: impl CryptoRng + RngCore, len: u32, user_id: UserId, key_id: KeyId) -> Self {
        todo!()
    }
}

#[cfg(test)]
mod test {
    use super::*;

    #[test]
    #[should_panic(expected = "not yet implemented")]
    fn derive_master_key_not_implemented() {
        let _master_key = OpaqueExportKey.derive_master_key();
    }

    #[test]
    #[should_panic(expected = "not yet implemented")]
    fn encrypt_storage_key_not_implemented() {
        let _encrypted_storage_key = MasterKey.encrypt_storage_key(StorageKey);
    }

    #[test]
    #[should_panic(expected = "not yet implemented")]
    fn storage_key_generation_not_implemented() {
        let _storage_key = StorageKey::generate();
    }

    #[test]
    #[should_panic(expected = "not yet implemented")]
    fn data_encryption_not_implemented() {
        let thread_rng = rand::thread_rng();
        let user_id = UserId::default();
        let secret = Secret::generate(thread_rng, 32, user_id, KeyId);
        let _encrypted_secret = StorageKey.encrypt_data(&secret);
    }

    #[test]
    #[should_panic(expected = "not yet implemented")]
    fn secret_generation_not_implemented() {
        let thread_rng = rand::thread_rng();
        let user_id = UserId::default();
        let _secret = Secret::generate(thread_rng, 32, user_id, KeyId);
    }

    #[test]
    #[should_panic(expected = "not yet implemented")]
    fn key_id_generation_not_implemented() {
        let thread_rng = rand::thread_rng();
        let _key_id = KeyId::generate(thread_rng, UserId::default());
    }

    #[test]
    #[should_panic(expected = "not yet implemented")]
    fn encryption_not_implemented() {
        let bytes = Bytes::default();
        let _encrypted = Encrypted::encrypt(bytes, &AssociatedData::default(), &AeadKey);
    }

    #[test]
    #[should_panic(expected = "not yet implemented")]
    fn decryption_not_implemented() {
        let bytes = Bytes::default();
        let encrypted = Encrypted::encrypt(bytes, &AssociatedData::default(), &AeadKey);
        let _decrypted = encrypted.decrypt(&AeadKey);
    }
}
