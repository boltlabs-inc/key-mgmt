[config]
default_to_workspace = false

# -- Server Tasks --

# Shorthand task to start server and monitor its output.
[tasks.run]
alias = "start-server-attached"

# Shorthand task to start server in the background.
[tasks.start]
alias = "start-server-detached"

# Shorthand task to stop a server running in the background.
[tasks.stop]
alias = "stop-server"

# Shorthand task to destroy the docker containers for a server.
[tasks.teardown]
alias = "teardown-server"

# Stops the server, recompiles it, and restarts it
[tasks.restart]
dependencies = ["teardown", "start"]

# Start a key server and monitor its output.
[tasks.start-server-attached]
command = "docker"
args = ["compose", "up",
        "--build", "mongodb", "key_server", "key_server_mutual_auth",
        "--attach", "key_server", 
        "--attach", "key_server_mutual_auth"
]
dependencies = ["certs", "sse"]

# Start a key server in the background
[tasks.start-server-detached]
command = "docker"
args = ["compose", "up", 
        "--build", "mongodb", "key_server", "key_server_mutual_auth",
        "--wait"
]
dependencies = ["certs", "sse"]

# Stop a key server running in the background.
[tasks.stop-server]
command = "docker"
args = ["compose", "stop"]

# Destroy the docker containers for a server.
[tasks.teardown-server]
command = "docker"
args = ["compose", "down", "--rmi", "local", "--volumes", "--remove-orphans"]

# -- Testing Tasks --

# Run end-to-end tests against a server that can be accessed via localhost.
# Servers running in Docker satisfy this requirement.
[tasks.e2e]
command = "cargo"
args = ["run", "--bin", "lock-keeper-tests", "--", "--test-type", "e2e"]

# Run integration tests against a server that can be accessed via localhost.
# Servers running in Docker satisfy this requirement.
[tasks.integration]
command = "cargo"
args = ["run", "--bin", "lock-keeper-tests", "--", "--test-type", "integration"]

# Run all tests that require a server to be running in Docker.
[tasks.all-tests]
command = "cargo"
args = ["run", "--bin", "lock-keeper-tests", "--", "--test-type", "all"]
dependencies = ["ci-test"]

# -- CI Tasks --

[tasks.ci]
dependencies = ["ci-format", "ci-clippy", "ci-build", "ci-test", "ci-doc-test", "ci-docs"]

[tasks.ci-format]
toolchain = "nightly"
command = "cargo"
args = ["fmt", "--all", "--check"]

[tasks.ci-clippy]
command = "cargo"
args = ["clippy", "--all-features", "--all-targets", "--workspace", "--", "-Dwarnings"]

[tasks.ci-build]
command = "cargo"
args = ["build", "--all-features", "--all-targets", "--workspace"]

[tasks.ci-test]
command = "cargo"
args = ["test", "--all-features", "--lib", "--bins", "--workspace"]

[tasks.ci-doc-test]
command = "cargo"
args = ["test", "--all-features", "--doc", "--workspace"]

[tasks.ci-docs]
env = { "RUSTDOCFLAGS" = "-Dwarnings" }
command = "cargo"
args = ["doc", "--all-features", "--no-deps", "--document-private-items", "--workspace"]

# -- Utility Tasks --

# -- Aliases --
[tasks.fmt]
toolchain = "nightly"
command = "cargo"
args = ["fmt", "--all"]

[tasks.format]
alias = "fmt"

[tasks.clippy]
alias = "ci-clippy"

[tasks.test]
alias = "ci-test"

# Run the interactive client.
[tasks.cli]
command = "cargo"
args = ["run", "--bin", "lock-keeper-client-cli"]

# Generate certificates in the dev/certs/gen directory
[tasks.certs]
script = { file = "dev/test-pki/generate-test-pki.sh" }

# Generate server side encryption key in the dev/remote-storage-key/gen directory
[tasks.sse]
script = { file = "dev/remote-storage-key/generate-test-remote-storage-key.sh" }
