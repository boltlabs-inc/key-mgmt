[config]
default_to_workspace = false

# -- Server Tasks --

# Shorthand task to start server and monitor its output.
[tasks.run]
alias = "start-server-attached"

# Shorthand task to start server in the background.
[tasks.start]
alias = "start-server-detached"

# Shorthand task to stop a server running in the background.
[tasks.stop]
alias = "stop-server"

# Shorthand task to destroy the docker containers for a server.
[tasks.teardown]
alias = "teardown-server"

# Stops the server, recompiles it, and restarts it
[tasks.restart]
dependencies = ["teardown", "start"]

# Start a key server and monitor its output.
[tasks.start-server-attached]
command = "docker"
args = ["compose", "up",
        "--build", "postgres", "nginx", "key_server", "ks_client_auth", "ks_nginx",
        "--attach", "key_server", 
        "--attach", "ks_client_auth",
        "--attach", "ks_nginx",
]

# Start a key server in the background
[tasks.start-server-detached]
command = "docker"
args = ["compose", "up", 
        "--build", "postgres", "nginx", "key_server", "ks_client_auth", "ks_nginx",
        "--wait",
]

# Stop a key server running in the background.
[tasks.stop-server]
command = "docker"
args = ["compose", "stop"]

# Destroy the docker containers for a server.
[tasks.teardown-server]
command = "docker"
args = ["compose", "down", "--rmi", "local", "--volumes", "--remove-orphans"]

# -- Testing Tasks --

# Run end-to-end tests against a server that can be accessed via localhost.
# Servers running in Docker satisfy this requirement.
[tasks.e2e]
command = "cargo"
args = ["run", "--bin", "lock-keeper-tests", "--", "--standard-only", "--test-type", "e2e"]

# Run integration tests against a server that can be accessed via localhost.
# Servers running in Docker satisfy this requirement.
[tasks.integration]
command = "cargo"
args = ["run", "--bin", "lock-keeper-tests", "--", "--test-type", "integration"]

# Run integration tests and print all errors even for tests that pass.
[tasks.integration-debug]
command = "cargo"
args = ["run", "--bin", "lock-keeper-tests", "--", "--test-type", "integration", "--print-errors"]

# Run all tests that require a server to be running in Docker.
[tasks.all-tests]
command = "cargo"
args = ["run", "--bin", "lock-keeper-tests", "--", "--test-type", "all"]
dependencies = ["ci-test"]

# -- CI Tasks --

[tasks.ci]
dependencies = ["ci-format", "ci-clippy", "ci-build", "ci-test", "ci-doc-test", "ci-docs"]

[tasks.ci-format]
command = "cargo"
args = ["fmt", "--all", "--check"]

[tasks.ci-clippy]
command = "cargo"
args = ["clippy", "--all-features", "--all-targets", "--workspace", "--", "-Dwarnings"]

[tasks.ci-build]
command = "cargo"
args = ["build", "--all-features", "--all-targets", "--workspace"]

[tasks.ci-test]
command = "cargo"
args = ["test", "--all-features", "--lib", "--bins", "--workspace"]

[tasks.ci-doc-test]
command = "cargo"
args = ["test", "--all-features", "--doc", "--workspace"]

[tasks.ci-docs]
env = { "RUSTDOCFLAGS" = "-Dwarnings" }
command = "cargo"
args = ["doc", "--all-features", "--no-deps", "--document-private-items", "--workspace"]

# -- Database Tasks --

# Update the `sqlx-data.json` file
[tasks.sqlx-prepare]
env = { "DATABASE_URL" = "postgres://test:test_password@localhost:5432/test" }
command = "cargo"
args = ["sqlx", "prepare", "--merged"]

# Connect to test database using `psql`
[tasks.test-db]
env = { "PGPASSWORD" = "test_password" }
command = "psql"
args = ["-h", "localhost", "-p", "5432", "-d", "test", "-U", "test"]


# -- Aliases --
[tasks.fmt]
command = "cargo"
args = ["fmt", "--all"]

[tasks.format]
alias = "fmt"

[tasks.clippy]
alias = "ci-clippy"

[tasks.test]
alias = "ci-test"

# -- Client CLI tasks --

# Run the client CLI in interactive mode
[tasks.cli]
command = "cargo"
args = ["run", "--bin", "lock-keeper-client-cli", "--", "--config", "dev/config/local/Client.toml", "${@}"]

# Runs a CLI script to generate a retrieve a few keys
[tasks.script-generate]
command = "cargo"
args = ["run", "--bin", "lock-keeper-client-cli", "--", "--config", "dev/config/local/Client.toml", "--script-file", "dev/cli-scripts/generate.lk"]

# Runs a CLI script to remotely generate a signing key and sign some data
[tasks.script-sign]
command = "cargo"
args = ["run", "--bin", "lock-keeper-client-cli", "--", "--config", "dev/config/local/Client.toml", "--script-file", "dev/cli-scripts/sign.lk"]

# Runs a CLI script to export a remotely generated signing key
[tasks.script-export]
command = "cargo"
args = ["run", "--bin", "lock-keeper-client-cli", "--", "--config", "dev/config/local/Client.toml", "--script-file", "dev/cli-scripts/export.lk"]

# Runs a CLI script to import and then export a signing key
[tasks.script-import]
command = "cargo"
args = ["run", "--bin", "lock-keeper-client-cli", "--", "--config", "dev/config/local/Client.toml", "--script-file", "dev/cli-scripts/import.lk"]

# Runs all scripts
[tasks.all-scripts]
dependencies = ["script-generate", "script-sign", "script-export", "script-import"]

# Run all initial tasks required to start LockKeeper
[tasks.init]
dependencies = ["certs", "remote-storage-key"]

# Generate certificates in the dev/certs/gen directory
[tasks.certs]
script = { file = "dev/test-pki/generate-test-pki.sh" }

# Generate remote storage key in the dev/remote-storage-key/gen directory
[tasks.remote-storage-key]
script = { file = "dev/remote-storage-key/generate-test-remote-storage-key.sh" }

# Generate and print base64-encoded Opaque Server Setup
[tasks.opaque-server-setup]
command = "cargo"
args = ["run", "--manifest-path", "dev/generate-opaque-server-setup/Cargo.toml"]
